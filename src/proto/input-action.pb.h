// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input-action.proto

#ifndef PROTOBUF_INCLUDED_input_2daction_2eproto
#define PROTOBUF_INCLUDED_input_2daction_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_input_2daction_2eproto 

namespace protobuf_input_2daction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_input_2daction_2eproto
namespace multiplayer {
class InputAction;
class InputActionDefaultTypeInternal;
extern InputActionDefaultTypeInternal _InputAction_default_instance_;
}  // namespace multiplayer
namespace google {
namespace protobuf {
template<> ::multiplayer::InputAction* Arena::CreateMaybeMessage<::multiplayer::InputAction>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace multiplayer {

// ===================================================================

class InputAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:multiplayer.InputAction) */ {
 public:
  InputAction();
  virtual ~InputAction();

  InputAction(const InputAction& from);

  inline InputAction& operator=(const InputAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputAction(InputAction&& from) noexcept
    : InputAction() {
    *this = ::std::move(from);
  }

  inline InputAction& operator=(InputAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InputAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputAction* internal_default_instance() {
    return reinterpret_cast<const InputAction*>(
               &_InputAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InputAction* other);
  friend void swap(InputAction& a, InputAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputAction* New() const final {
    return CreateMaybeMessage<InputAction>(NULL);
  }

  InputAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InputAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InputAction& from);
  void MergeFrom(const InputAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string objectId = 6;
  void clear_objectid();
  static const int kObjectIdFieldNumber = 6;
  const ::std::string& objectid() const;
  void set_objectid(const ::std::string& value);
  #if LANG_CXX11
  void set_objectid(::std::string&& value);
  #endif
  void set_objectid(const char* value);
  void set_objectid(const char* value, size_t size);
  ::std::string* mutable_objectid();
  ::std::string* release_objectid();
  void set_allocated_objectid(::std::string* objectid);

  // int32 frameIndex = 1;
  void clear_frameindex();
  static const int kFrameIndexFieldNumber = 1;
  ::google::protobuf::int32 frameindex() const;
  void set_frameindex(::google::protobuf::int32 value);

  // float yaw = 2;
  void clear_yaw();
  static const int kYawFieldNumber = 2;
  float yaw() const;
  void set_yaw(float value);

  // float pitch = 3;
  void clear_pitch();
  static const int kPitchFieldNumber = 3;
  float pitch() const;
  void set_pitch(float value);

  // float rotationSpeed = 4;
  void clear_rotationspeed();
  static const int kRotationSpeedFieldNumber = 4;
  float rotationspeed() const;
  void set_rotationspeed(float value);

  // float rollAngle = 5;
  void clear_rollangle();
  static const int kRollAngleFieldNumber = 5;
  float rollangle() const;
  void set_rollangle(float value);

  // @@protoc_insertion_point(class_scope:multiplayer.InputAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr objectid_;
  ::google::protobuf::int32 frameindex_;
  float yaw_;
  float pitch_;
  float rotationspeed_;
  float rollangle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_input_2daction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputAction

// int32 frameIndex = 1;
inline void InputAction::clear_frameindex() {
  frameindex_ = 0;
}
inline ::google::protobuf::int32 InputAction::frameindex() const {
  // @@protoc_insertion_point(field_get:multiplayer.InputAction.frameIndex)
  return frameindex_;
}
inline void InputAction::set_frameindex(::google::protobuf::int32 value) {
  
  frameindex_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.InputAction.frameIndex)
}

// float yaw = 2;
inline void InputAction::clear_yaw() {
  yaw_ = 0;
}
inline float InputAction::yaw() const {
  // @@protoc_insertion_point(field_get:multiplayer.InputAction.yaw)
  return yaw_;
}
inline void InputAction::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.InputAction.yaw)
}

// float pitch = 3;
inline void InputAction::clear_pitch() {
  pitch_ = 0;
}
inline float InputAction::pitch() const {
  // @@protoc_insertion_point(field_get:multiplayer.InputAction.pitch)
  return pitch_;
}
inline void InputAction::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.InputAction.pitch)
}

// float rotationSpeed = 4;
inline void InputAction::clear_rotationspeed() {
  rotationspeed_ = 0;
}
inline float InputAction::rotationspeed() const {
  // @@protoc_insertion_point(field_get:multiplayer.InputAction.rotationSpeed)
  return rotationspeed_;
}
inline void InputAction::set_rotationspeed(float value) {
  
  rotationspeed_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.InputAction.rotationSpeed)
}

// float rollAngle = 5;
inline void InputAction::clear_rollangle() {
  rollangle_ = 0;
}
inline float InputAction::rollangle() const {
  // @@protoc_insertion_point(field_get:multiplayer.InputAction.rollAngle)
  return rollangle_;
}
inline void InputAction::set_rollangle(float value) {
  
  rollangle_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.InputAction.rollAngle)
}

// string objectId = 6;
inline void InputAction::clear_objectid() {
  objectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InputAction::objectid() const {
  // @@protoc_insertion_point(field_get:multiplayer.InputAction.objectId)
  return objectid_.GetNoArena();
}
inline void InputAction::set_objectid(const ::std::string& value) {
  
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:multiplayer.InputAction.objectId)
}
#if LANG_CXX11
inline void InputAction::set_objectid(::std::string&& value) {
  
  objectid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:multiplayer.InputAction.objectId)
}
#endif
inline void InputAction::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:multiplayer.InputAction.objectId)
}
inline void InputAction::set_objectid(const char* value, size_t size) {
  
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:multiplayer.InputAction.objectId)
}
inline ::std::string* InputAction::mutable_objectid() {
  
  // @@protoc_insertion_point(field_mutable:multiplayer.InputAction.objectId)
  return objectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InputAction::release_objectid() {
  // @@protoc_insertion_point(field_release:multiplayer.InputAction.objectId)
  
  return objectid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InputAction::set_allocated_objectid(::std::string* objectid) {
  if (objectid != NULL) {
    
  } else {
    
  }
  objectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectid);
  // @@protoc_insertion_point(field_set_allocated:multiplayer.InputAction.objectId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace multiplayer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_input_2daction_2eproto
