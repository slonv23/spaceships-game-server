// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object-action.proto

#ifndef PROTOBUF_INCLUDED_object_2daction_2eproto
#define PROTOBUF_INCLUDED_object_2daction_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "space-fighter/space-fighter-input.pb.h"
#include "space-fighter/space-fighter-open-fire.pb.h"
#include "space-fighter/space-fighter-destroy.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_object_2daction_2eproto 

namespace protobuf_object_2daction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_object_2daction_2eproto
namespace multiplayer {
class ObjectAction;
class ObjectActionDefaultTypeInternal;
extern ObjectActionDefaultTypeInternal _ObjectAction_default_instance_;
}  // namespace multiplayer
namespace google {
namespace protobuf {
template<> ::multiplayer::ObjectAction* Arena::CreateMaybeMessage<::multiplayer::ObjectAction>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace multiplayer {

// ===================================================================

class ObjectAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:multiplayer.ObjectAction) */ {
 public:
  ObjectAction();
  virtual ~ObjectAction();

  ObjectAction(const ObjectAction& from);

  inline ObjectAction& operator=(const ObjectAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectAction(ObjectAction&& from) noexcept
    : ObjectAction() {
    *this = ::std::move(from);
  }

  inline ObjectAction& operator=(ObjectAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectAction& default_instance();

  enum ActionCase {
    kSpaceFighterInput = 3,
    kSpaceFighterOpenFire = 4,
    kSpaceFighterDestroy = 5,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectAction* internal_default_instance() {
    return reinterpret_cast<const ObjectAction*>(
               &_ObjectAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ObjectAction* other);
  friend void swap(ObjectAction& a, ObjectAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectAction* New() const final {
    return CreateMaybeMessage<ObjectAction>(NULL);
  }

  ObjectAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectAction& from);
  void MergeFrom(const ObjectAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 objectId = 1;
  void clear_objectid();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 objectid() const;
  void set_objectid(::google::protobuf::int32 value);

  // int32 frameIndex = 2;
  void clear_frameindex();
  static const int kFrameIndexFieldNumber = 2;
  ::google::protobuf::int32 frameindex() const;
  void set_frameindex(::google::protobuf::int32 value);

  // .multiplayer.SpaceFighterInput spaceFighterInput = 3;
  bool has_spacefighterinput() const;
  void clear_spacefighterinput();
  static const int kSpaceFighterInputFieldNumber = 3;
  private:
  const ::multiplayer::SpaceFighterInput& _internal_spacefighterinput() const;
  public:
  const ::multiplayer::SpaceFighterInput& spacefighterinput() const;
  ::multiplayer::SpaceFighterInput* release_spacefighterinput();
  ::multiplayer::SpaceFighterInput* mutable_spacefighterinput();
  void set_allocated_spacefighterinput(::multiplayer::SpaceFighterInput* spacefighterinput);

  // .multiplayer.SpaceFighterOpenFire spaceFighterOpenFire = 4;
  bool has_spacefighteropenfire() const;
  void clear_spacefighteropenfire();
  static const int kSpaceFighterOpenFireFieldNumber = 4;
  private:
  const ::multiplayer::SpaceFighterOpenFire& _internal_spacefighteropenfire() const;
  public:
  const ::multiplayer::SpaceFighterOpenFire& spacefighteropenfire() const;
  ::multiplayer::SpaceFighterOpenFire* release_spacefighteropenfire();
  ::multiplayer::SpaceFighterOpenFire* mutable_spacefighteropenfire();
  void set_allocated_spacefighteropenfire(::multiplayer::SpaceFighterOpenFire* spacefighteropenfire);

  // .multiplayer.SpaceFighterDestroy SpaceFighterDestroy = 5;
  bool has_spacefighterdestroy() const;
  void clear_spacefighterdestroy();
  static const int kSpaceFighterDestroyFieldNumber = 5;
  private:
  const ::multiplayer::SpaceFighterDestroy& _internal_spacefighterdestroy() const;
  public:
  const ::multiplayer::SpaceFighterDestroy& spacefighterdestroy() const;
  ::multiplayer::SpaceFighterDestroy* release_spacefighterdestroy();
  ::multiplayer::SpaceFighterDestroy* mutable_spacefighterdestroy();
  void set_allocated_spacefighterdestroy(::multiplayer::SpaceFighterDestroy* spacefighterdestroy);

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:multiplayer.ObjectAction)
 private:
  void set_has_spacefighterinput();
  void set_has_spacefighteropenfire();
  void set_has_spacefighterdestroy();

  inline bool has_action() const;
  inline void clear_has_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 frameindex_;
  union ActionUnion {
    ActionUnion() {}
    ::multiplayer::SpaceFighterInput* spacefighterinput_;
    ::multiplayer::SpaceFighterOpenFire* spacefighteropenfire_;
    ::multiplayer::SpaceFighterDestroy* spacefighterdestroy_;
  } action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_object_2daction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectAction

// int32 objectId = 1;
inline void ObjectAction::clear_objectid() {
  objectid_ = 0;
}
inline ::google::protobuf::int32 ObjectAction::objectid() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectAction.objectId)
  return objectid_;
}
inline void ObjectAction::set_objectid(::google::protobuf::int32 value) {
  
  objectid_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.ObjectAction.objectId)
}

// int32 frameIndex = 2;
inline void ObjectAction::clear_frameindex() {
  frameindex_ = 0;
}
inline ::google::protobuf::int32 ObjectAction::frameindex() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectAction.frameIndex)
  return frameindex_;
}
inline void ObjectAction::set_frameindex(::google::protobuf::int32 value) {
  
  frameindex_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.ObjectAction.frameIndex)
}

// .multiplayer.SpaceFighterInput spaceFighterInput = 3;
inline bool ObjectAction::has_spacefighterinput() const {
  return action_case() == kSpaceFighterInput;
}
inline void ObjectAction::set_has_spacefighterinput() {
  _oneof_case_[0] = kSpaceFighterInput;
}
inline const ::multiplayer::SpaceFighterInput& ObjectAction::_internal_spacefighterinput() const {
  return *action_.spacefighterinput_;
}
inline ::multiplayer::SpaceFighterInput* ObjectAction::release_spacefighterinput() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectAction.spaceFighterInput)
  if (has_spacefighterinput()) {
    clear_has_action();
      ::multiplayer::SpaceFighterInput* temp = action_.spacefighterinput_;
    action_.spacefighterinput_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::multiplayer::SpaceFighterInput& ObjectAction::spacefighterinput() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectAction.spaceFighterInput)
  return has_spacefighterinput()
      ? *action_.spacefighterinput_
      : *reinterpret_cast< ::multiplayer::SpaceFighterInput*>(&::multiplayer::_SpaceFighterInput_default_instance_);
}
inline ::multiplayer::SpaceFighterInput* ObjectAction::mutable_spacefighterinput() {
  if (!has_spacefighterinput()) {
    clear_action();
    set_has_spacefighterinput();
    action_.spacefighterinput_ = CreateMaybeMessage< ::multiplayer::SpaceFighterInput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectAction.spaceFighterInput)
  return action_.spacefighterinput_;
}

// .multiplayer.SpaceFighterOpenFire spaceFighterOpenFire = 4;
inline bool ObjectAction::has_spacefighteropenfire() const {
  return action_case() == kSpaceFighterOpenFire;
}
inline void ObjectAction::set_has_spacefighteropenfire() {
  _oneof_case_[0] = kSpaceFighterOpenFire;
}
inline const ::multiplayer::SpaceFighterOpenFire& ObjectAction::_internal_spacefighteropenfire() const {
  return *action_.spacefighteropenfire_;
}
inline ::multiplayer::SpaceFighterOpenFire* ObjectAction::release_spacefighteropenfire() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectAction.spaceFighterOpenFire)
  if (has_spacefighteropenfire()) {
    clear_has_action();
      ::multiplayer::SpaceFighterOpenFire* temp = action_.spacefighteropenfire_;
    action_.spacefighteropenfire_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::multiplayer::SpaceFighterOpenFire& ObjectAction::spacefighteropenfire() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectAction.spaceFighterOpenFire)
  return has_spacefighteropenfire()
      ? *action_.spacefighteropenfire_
      : *reinterpret_cast< ::multiplayer::SpaceFighterOpenFire*>(&::multiplayer::_SpaceFighterOpenFire_default_instance_);
}
inline ::multiplayer::SpaceFighterOpenFire* ObjectAction::mutable_spacefighteropenfire() {
  if (!has_spacefighteropenfire()) {
    clear_action();
    set_has_spacefighteropenfire();
    action_.spacefighteropenfire_ = CreateMaybeMessage< ::multiplayer::SpaceFighterOpenFire >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectAction.spaceFighterOpenFire)
  return action_.spacefighteropenfire_;
}

// .multiplayer.SpaceFighterDestroy SpaceFighterDestroy = 5;
inline bool ObjectAction::has_spacefighterdestroy() const {
  return action_case() == kSpaceFighterDestroy;
}
inline void ObjectAction::set_has_spacefighterdestroy() {
  _oneof_case_[0] = kSpaceFighterDestroy;
}
inline const ::multiplayer::SpaceFighterDestroy& ObjectAction::_internal_spacefighterdestroy() const {
  return *action_.spacefighterdestroy_;
}
inline ::multiplayer::SpaceFighterDestroy* ObjectAction::release_spacefighterdestroy() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectAction.SpaceFighterDestroy)
  if (has_spacefighterdestroy()) {
    clear_has_action();
      ::multiplayer::SpaceFighterDestroy* temp = action_.spacefighterdestroy_;
    action_.spacefighterdestroy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::multiplayer::SpaceFighterDestroy& ObjectAction::spacefighterdestroy() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectAction.SpaceFighterDestroy)
  return has_spacefighterdestroy()
      ? *action_.spacefighterdestroy_
      : *reinterpret_cast< ::multiplayer::SpaceFighterDestroy*>(&::multiplayer::_SpaceFighterDestroy_default_instance_);
}
inline ::multiplayer::SpaceFighterDestroy* ObjectAction::mutable_spacefighterdestroy() {
  if (!has_spacefighterdestroy()) {
    clear_action();
    set_has_spacefighterdestroy();
    action_.spacefighterdestroy_ = CreateMaybeMessage< ::multiplayer::SpaceFighterDestroy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectAction.SpaceFighterDestroy)
  return action_.spacefighterdestroy_;
}

inline bool ObjectAction::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void ObjectAction::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline ObjectAction::ActionCase ObjectAction::action_case() const {
  return ObjectAction::ActionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace multiplayer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_object_2daction_2eproto
