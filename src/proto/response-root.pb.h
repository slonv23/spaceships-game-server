// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response-root.proto

#ifndef PROTOBUF_INCLUDED_response_2droot_2eproto
#define PROTOBUF_INCLUDED_response_2droot_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "world-state.pb.h"
#include "spawn-response.pb.h"
#include "request-ack.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_response_2droot_2eproto 

namespace protobuf_response_2droot_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_response_2droot_2eproto
namespace multiplayer {
class ResponseRoot;
class ResponseRootDefaultTypeInternal;
extern ResponseRootDefaultTypeInternal _ResponseRoot_default_instance_;
}  // namespace multiplayer
namespace google {
namespace protobuf {
template<> ::multiplayer::ResponseRoot* Arena::CreateMaybeMessage<::multiplayer::ResponseRoot>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace multiplayer {

// ===================================================================

class ResponseRoot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:multiplayer.ResponseRoot) */ {
 public:
  ResponseRoot();
  virtual ~ResponseRoot();

  ResponseRoot(const ResponseRoot& from);

  inline ResponseRoot& operator=(const ResponseRoot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseRoot(ResponseRoot&& from) noexcept
    : ResponseRoot() {
    *this = ::std::move(from);
  }

  inline ResponseRoot& operator=(ResponseRoot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseRoot& default_instance();

  enum MessageCase {
    kWorldState = 2,
    kSpawnResponse = 3,
    kRequestAck = 4,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseRoot* internal_default_instance() {
    return reinterpret_cast<const ResponseRoot*>(
               &_ResponseRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ResponseRoot* other);
  friend void swap(ResponseRoot& a, ResponseRoot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseRoot* New() const final {
    return CreateMaybeMessage<ResponseRoot>(NULL);
  }

  ResponseRoot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseRoot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseRoot& from);
  void MergeFrom(const ResponseRoot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseRoot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 requestId = 1;
  void clear_requestid();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // .multiplayer.WorldState worldState = 2;
  bool has_worldstate() const;
  void clear_worldstate();
  static const int kWorldStateFieldNumber = 2;
  private:
  const ::multiplayer::WorldState& _internal_worldstate() const;
  public:
  const ::multiplayer::WorldState& worldstate() const;
  ::multiplayer::WorldState* release_worldstate();
  ::multiplayer::WorldState* mutable_worldstate();
  void set_allocated_worldstate(::multiplayer::WorldState* worldstate);

  // .multiplayer.SpawnResponse spawnResponse = 3;
  bool has_spawnresponse() const;
  void clear_spawnresponse();
  static const int kSpawnResponseFieldNumber = 3;
  private:
  const ::multiplayer::SpawnResponse& _internal_spawnresponse() const;
  public:
  const ::multiplayer::SpawnResponse& spawnresponse() const;
  ::multiplayer::SpawnResponse* release_spawnresponse();
  ::multiplayer::SpawnResponse* mutable_spawnresponse();
  void set_allocated_spawnresponse(::multiplayer::SpawnResponse* spawnresponse);

  // .multiplayer.RequestAck requestAck = 4;
  bool has_requestack() const;
  void clear_requestack();
  static const int kRequestAckFieldNumber = 4;
  private:
  const ::multiplayer::RequestAck& _internal_requestack() const;
  public:
  const ::multiplayer::RequestAck& requestack() const;
  ::multiplayer::RequestAck* release_requestack();
  ::multiplayer::RequestAck* mutable_requestack();
  void set_allocated_requestack(::multiplayer::RequestAck* requestack);

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:multiplayer.ResponseRoot)
 private:
  void set_has_worldstate();
  void set_has_spawnresponse();
  void set_has_requestack();

  inline bool has_message() const;
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 requestid_;
  union MessageUnion {
    MessageUnion() {}
    ::multiplayer::WorldState* worldstate_;
    ::multiplayer::SpawnResponse* spawnresponse_;
    ::multiplayer::RequestAck* requestack_;
  } message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_response_2droot_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResponseRoot

// int32 requestId = 1;
inline void ResponseRoot::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 ResponseRoot::requestid() const {
  // @@protoc_insertion_point(field_get:multiplayer.ResponseRoot.requestId)
  return requestid_;
}
inline void ResponseRoot::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.ResponseRoot.requestId)
}

// .multiplayer.WorldState worldState = 2;
inline bool ResponseRoot::has_worldstate() const {
  return message_case() == kWorldState;
}
inline void ResponseRoot::set_has_worldstate() {
  _oneof_case_[0] = kWorldState;
}
inline const ::multiplayer::WorldState& ResponseRoot::_internal_worldstate() const {
  return *message_.worldstate_;
}
inline ::multiplayer::WorldState* ResponseRoot::release_worldstate() {
  // @@protoc_insertion_point(field_release:multiplayer.ResponseRoot.worldState)
  if (has_worldstate()) {
    clear_has_message();
      ::multiplayer::WorldState* temp = message_.worldstate_;
    message_.worldstate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::multiplayer::WorldState& ResponseRoot::worldstate() const {
  // @@protoc_insertion_point(field_get:multiplayer.ResponseRoot.worldState)
  return has_worldstate()
      ? *message_.worldstate_
      : *reinterpret_cast< ::multiplayer::WorldState*>(&::multiplayer::_WorldState_default_instance_);
}
inline ::multiplayer::WorldState* ResponseRoot::mutable_worldstate() {
  if (!has_worldstate()) {
    clear_message();
    set_has_worldstate();
    message_.worldstate_ = CreateMaybeMessage< ::multiplayer::WorldState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ResponseRoot.worldState)
  return message_.worldstate_;
}

// .multiplayer.SpawnResponse spawnResponse = 3;
inline bool ResponseRoot::has_spawnresponse() const {
  return message_case() == kSpawnResponse;
}
inline void ResponseRoot::set_has_spawnresponse() {
  _oneof_case_[0] = kSpawnResponse;
}
inline const ::multiplayer::SpawnResponse& ResponseRoot::_internal_spawnresponse() const {
  return *message_.spawnresponse_;
}
inline ::multiplayer::SpawnResponse* ResponseRoot::release_spawnresponse() {
  // @@protoc_insertion_point(field_release:multiplayer.ResponseRoot.spawnResponse)
  if (has_spawnresponse()) {
    clear_has_message();
      ::multiplayer::SpawnResponse* temp = message_.spawnresponse_;
    message_.spawnresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::multiplayer::SpawnResponse& ResponseRoot::spawnresponse() const {
  // @@protoc_insertion_point(field_get:multiplayer.ResponseRoot.spawnResponse)
  return has_spawnresponse()
      ? *message_.spawnresponse_
      : *reinterpret_cast< ::multiplayer::SpawnResponse*>(&::multiplayer::_SpawnResponse_default_instance_);
}
inline ::multiplayer::SpawnResponse* ResponseRoot::mutable_spawnresponse() {
  if (!has_spawnresponse()) {
    clear_message();
    set_has_spawnresponse();
    message_.spawnresponse_ = CreateMaybeMessage< ::multiplayer::SpawnResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ResponseRoot.spawnResponse)
  return message_.spawnresponse_;
}

// .multiplayer.RequestAck requestAck = 4;
inline bool ResponseRoot::has_requestack() const {
  return message_case() == kRequestAck;
}
inline void ResponseRoot::set_has_requestack() {
  _oneof_case_[0] = kRequestAck;
}
inline const ::multiplayer::RequestAck& ResponseRoot::_internal_requestack() const {
  return *message_.requestack_;
}
inline ::multiplayer::RequestAck* ResponseRoot::release_requestack() {
  // @@protoc_insertion_point(field_release:multiplayer.ResponseRoot.requestAck)
  if (has_requestack()) {
    clear_has_message();
      ::multiplayer::RequestAck* temp = message_.requestack_;
    message_.requestack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::multiplayer::RequestAck& ResponseRoot::requestack() const {
  // @@protoc_insertion_point(field_get:multiplayer.ResponseRoot.requestAck)
  return has_requestack()
      ? *message_.requestack_
      : *reinterpret_cast< ::multiplayer::RequestAck*>(&::multiplayer::_RequestAck_default_instance_);
}
inline ::multiplayer::RequestAck* ResponseRoot::mutable_requestack() {
  if (!has_requestack()) {
    clear_message();
    set_has_requestack();
    message_.requestack_ = CreateMaybeMessage< ::multiplayer::RequestAck >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ResponseRoot.requestAck)
  return message_.requestack_;
}

inline bool ResponseRoot::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ResponseRoot::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ResponseRoot::MessageCase ResponseRoot::message_case() const {
  return ResponseRoot::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace multiplayer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_response_2droot_2eproto
