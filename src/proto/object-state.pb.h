// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object-state.proto

#ifndef PROTOBUF_INCLUDED_object_2dstate_2eproto
#define PROTOBUF_INCLUDED_object_2dstate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "space-fighter/space-fighter-state.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_object_2dstate_2eproto 

namespace protobuf_object_2dstate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_object_2dstate_2eproto
namespace multiplayer {
class ObjectState;
class ObjectStateDefaultTypeInternal;
extern ObjectStateDefaultTypeInternal _ObjectState_default_instance_;
}  // namespace multiplayer
namespace google {
namespace protobuf {
template<> ::multiplayer::ObjectState* Arena::CreateMaybeMessage<::multiplayer::ObjectState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace multiplayer {

// ===================================================================

class ObjectState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:multiplayer.ObjectState) */ {
 public:
  ObjectState();
  virtual ~ObjectState();

  ObjectState(const ObjectState& from);

  inline ObjectState& operator=(const ObjectState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectState(ObjectState&& from) noexcept
    : ObjectState() {
    *this = ::std::move(from);
  }

  inline ObjectState& operator=(ObjectState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectState& default_instance();

  enum StateCase {
    kSpaceFighterState = 3,
    STATE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectState* internal_default_instance() {
    return reinterpret_cast<const ObjectState*>(
               &_ObjectState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ObjectState* other);
  friend void swap(ObjectState& a, ObjectState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectState* New() const final {
    return CreateMaybeMessage<ObjectState>(NULL);
  }

  ObjectState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectState& from);
  void MergeFrom(const ObjectState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 objectType = 2;
  void clear_objecttype();
  static const int kObjectTypeFieldNumber = 2;
  ::google::protobuf::int32 objecttype() const;
  void set_objecttype(::google::protobuf::int32 value);

  // .multiplayer.SpaceFighterState spaceFighterState = 3;
  bool has_spacefighterstate() const;
  void clear_spacefighterstate();
  static const int kSpaceFighterStateFieldNumber = 3;
  private:
  const ::multiplayer::SpaceFighterState& _internal_spacefighterstate() const;
  public:
  const ::multiplayer::SpaceFighterState& spacefighterstate() const;
  ::multiplayer::SpaceFighterState* release_spacefighterstate();
  ::multiplayer::SpaceFighterState* mutable_spacefighterstate();
  void set_allocated_spacefighterstate(::multiplayer::SpaceFighterState* spacefighterstate);

  void clear_state();
  StateCase state_case() const;
  // @@protoc_insertion_point(class_scope:multiplayer.ObjectState)
 private:
  void set_has_spacefighterstate();

  inline bool has_state() const;
  inline void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 objecttype_;
  union StateUnion {
    StateUnion() {}
    ::multiplayer::SpaceFighterState* spacefighterstate_;
  } state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_object_2dstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectState

// int32 id = 1;
inline void ObjectState::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ObjectState::id() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.id)
  return id_;
}
inline void ObjectState::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.ObjectState.id)
}

// int32 objectType = 2;
inline void ObjectState::clear_objecttype() {
  objecttype_ = 0;
}
inline ::google::protobuf::int32 ObjectState::objecttype() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.objectType)
  return objecttype_;
}
inline void ObjectState::set_objecttype(::google::protobuf::int32 value) {
  
  objecttype_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.ObjectState.objectType)
}

// .multiplayer.SpaceFighterState spaceFighterState = 3;
inline bool ObjectState::has_spacefighterstate() const {
  return state_case() == kSpaceFighterState;
}
inline void ObjectState::set_has_spacefighterstate() {
  _oneof_case_[0] = kSpaceFighterState;
}
inline const ::multiplayer::SpaceFighterState& ObjectState::_internal_spacefighterstate() const {
  return *state_.spacefighterstate_;
}
inline ::multiplayer::SpaceFighterState* ObjectState::release_spacefighterstate() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectState.spaceFighterState)
  if (has_spacefighterstate()) {
    clear_has_state();
      ::multiplayer::SpaceFighterState* temp = state_.spacefighterstate_;
    state_.spacefighterstate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::multiplayer::SpaceFighterState& ObjectState::spacefighterstate() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.spaceFighterState)
  return has_spacefighterstate()
      ? *state_.spacefighterstate_
      : *reinterpret_cast< ::multiplayer::SpaceFighterState*>(&::multiplayer::_SpaceFighterState_default_instance_);
}
inline ::multiplayer::SpaceFighterState* ObjectState::mutable_spacefighterstate() {
  if (!has_spacefighterstate()) {
    clear_state();
    set_has_spacefighterstate();
    state_.spacefighterstate_ = CreateMaybeMessage< ::multiplayer::SpaceFighterState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectState.spaceFighterState)
  return state_.spacefighterstate_;
}

inline bool ObjectState::has_state() const {
  return state_case() != STATE_NOT_SET;
}
inline void ObjectState::clear_has_state() {
  _oneof_case_[0] = STATE_NOT_SET;
}
inline ObjectState::StateCase ObjectState::state_case() const {
  return ObjectState::StateCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace multiplayer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_object_2dstate_2eproto
