// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object-state.proto

#ifndef PROTOBUF_INCLUDED_object_2dstate_2eproto
#define PROTOBUF_INCLUDED_object_2dstate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "float-vector.pb.h"
#include "quaternion.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_object_2dstate_2eproto 

namespace protobuf_object_2dstate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_object_2dstate_2eproto
namespace multiplayer {
class ObjectState;
class ObjectStateDefaultTypeInternal;
extern ObjectStateDefaultTypeInternal _ObjectState_default_instance_;
}  // namespace multiplayer
namespace google {
namespace protobuf {
template<> ::multiplayer::ObjectState* Arena::CreateMaybeMessage<::multiplayer::ObjectState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace multiplayer {

// ===================================================================

class ObjectState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:multiplayer.ObjectState) */ {
 public:
  ObjectState();
  virtual ~ObjectState();

  ObjectState(const ObjectState& from);

  inline ObjectState& operator=(const ObjectState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectState(ObjectState&& from) noexcept
    : ObjectState() {
    *this = ::std::move(from);
  }

  inline ObjectState& operator=(ObjectState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectState* internal_default_instance() {
    return reinterpret_cast<const ObjectState*>(
               &_ObjectState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ObjectState* other);
  friend void swap(ObjectState& a, ObjectState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectState* New() const final {
    return CreateMaybeMessage<ObjectState>(NULL);
  }

  ObjectState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectState& from);
  void MergeFrom(const ObjectState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .multiplayer.FloatVector position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  private:
  const ::multiplayer::FloatVector& _internal_position() const;
  public:
  const ::multiplayer::FloatVector& position() const;
  ::multiplayer::FloatVector* release_position();
  ::multiplayer::FloatVector* mutable_position();
  void set_allocated_position(::multiplayer::FloatVector* position);

  // .multiplayer.Quaternion quaternion = 4;
  bool has_quaternion() const;
  void clear_quaternion();
  static const int kQuaternionFieldNumber = 4;
  private:
  const ::multiplayer::Quaternion& _internal_quaternion() const;
  public:
  const ::multiplayer::Quaternion& quaternion() const;
  ::multiplayer::Quaternion* release_quaternion();
  ::multiplayer::Quaternion* mutable_quaternion();
  void set_allocated_quaternion(::multiplayer::Quaternion* quaternion);

  // .multiplayer.FloatVector velocity = 5;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  private:
  const ::multiplayer::FloatVector& _internal_velocity() const;
  public:
  const ::multiplayer::FloatVector& velocity() const;
  ::multiplayer::FloatVector* release_velocity();
  ::multiplayer::FloatVector* mutable_velocity();
  void set_allocated_velocity(::multiplayer::FloatVector* velocity);

  // .multiplayer.FloatVector acceleration = 6;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 6;
  private:
  const ::multiplayer::FloatVector& _internal_acceleration() const;
  public:
  const ::multiplayer::FloatVector& acceleration() const;
  ::multiplayer::FloatVector* release_acceleration();
  ::multiplayer::FloatVector* mutable_acceleration();
  void set_allocated_acceleration(::multiplayer::FloatVector* acceleration);

  // .multiplayer.FloatVector wVelocity = 7;
  bool has_wvelocity() const;
  void clear_wvelocity();
  static const int kWVelocityFieldNumber = 7;
  private:
  const ::multiplayer::FloatVector& _internal_wvelocity() const;
  public:
  const ::multiplayer::FloatVector& wvelocity() const;
  ::multiplayer::FloatVector* release_wvelocity();
  ::multiplayer::FloatVector* mutable_wvelocity();
  void set_allocated_wvelocity(::multiplayer::FloatVector* wvelocity);

  // .multiplayer.FloatVector wAcceleration = 8;
  bool has_wacceleration() const;
  void clear_wacceleration();
  static const int kWAccelerationFieldNumber = 8;
  private:
  const ::multiplayer::FloatVector& _internal_wacceleration() const;
  public:
  const ::multiplayer::FloatVector& wacceleration() const;
  ::multiplayer::FloatVector* release_wacceleration();
  ::multiplayer::FloatVector* mutable_wacceleration();
  void set_allocated_wacceleration(::multiplayer::FloatVector* wacceleration);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 objectType = 2;
  void clear_objecttype();
  static const int kObjectTypeFieldNumber = 2;
  ::google::protobuf::int32 objecttype() const;
  void set_objecttype(::google::protobuf::int32 value);

  // float angleToControlX = 9;
  void clear_angletocontrolx();
  static const int kAngleToControlXFieldNumber = 9;
  float angletocontrolx() const;
  void set_angletocontrolx(float value);

  // @@protoc_insertion_point(class_scope:multiplayer.ObjectState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::multiplayer::FloatVector* position_;
  ::multiplayer::Quaternion* quaternion_;
  ::multiplayer::FloatVector* velocity_;
  ::multiplayer::FloatVector* acceleration_;
  ::multiplayer::FloatVector* wvelocity_;
  ::multiplayer::FloatVector* wacceleration_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 objecttype_;
  float angletocontrolx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_object_2dstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectState

// int32 id = 1;
inline void ObjectState::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ObjectState::id() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.id)
  return id_;
}
inline void ObjectState::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.ObjectState.id)
}

// int32 objectType = 2;
inline void ObjectState::clear_objecttype() {
  objecttype_ = 0;
}
inline ::google::protobuf::int32 ObjectState::objecttype() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.objectType)
  return objecttype_;
}
inline void ObjectState::set_objecttype(::google::protobuf::int32 value) {
  
  objecttype_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.ObjectState.objectType)
}

// .multiplayer.FloatVector position = 3;
inline bool ObjectState::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::multiplayer::FloatVector& ObjectState::_internal_position() const {
  return *position_;
}
inline const ::multiplayer::FloatVector& ObjectState::position() const {
  const ::multiplayer::FloatVector* p = position_;
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.position)
  return p != NULL ? *p : *reinterpret_cast<const ::multiplayer::FloatVector*>(
      &::multiplayer::_FloatVector_default_instance_);
}
inline ::multiplayer::FloatVector* ObjectState::release_position() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectState.position)
  
  ::multiplayer::FloatVector* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::multiplayer::FloatVector* ObjectState::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::multiplayer::FloatVector>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectState.position)
  return position_;
}
inline void ObjectState::set_allocated_position(::multiplayer::FloatVector* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:multiplayer.ObjectState.position)
}

// .multiplayer.Quaternion quaternion = 4;
inline bool ObjectState::has_quaternion() const {
  return this != internal_default_instance() && quaternion_ != NULL;
}
inline const ::multiplayer::Quaternion& ObjectState::_internal_quaternion() const {
  return *quaternion_;
}
inline const ::multiplayer::Quaternion& ObjectState::quaternion() const {
  const ::multiplayer::Quaternion* p = quaternion_;
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.quaternion)
  return p != NULL ? *p : *reinterpret_cast<const ::multiplayer::Quaternion*>(
      &::multiplayer::_Quaternion_default_instance_);
}
inline ::multiplayer::Quaternion* ObjectState::release_quaternion() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectState.quaternion)
  
  ::multiplayer::Quaternion* temp = quaternion_;
  quaternion_ = NULL;
  return temp;
}
inline ::multiplayer::Quaternion* ObjectState::mutable_quaternion() {
  
  if (quaternion_ == NULL) {
    auto* p = CreateMaybeMessage<::multiplayer::Quaternion>(GetArenaNoVirtual());
    quaternion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectState.quaternion)
  return quaternion_;
}
inline void ObjectState::set_allocated_quaternion(::multiplayer::Quaternion* quaternion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quaternion_);
  }
  if (quaternion) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quaternion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    
  } else {
    
  }
  quaternion_ = quaternion;
  // @@protoc_insertion_point(field_set_allocated:multiplayer.ObjectState.quaternion)
}

// .multiplayer.FloatVector velocity = 5;
inline bool ObjectState::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::multiplayer::FloatVector& ObjectState::_internal_velocity() const {
  return *velocity_;
}
inline const ::multiplayer::FloatVector& ObjectState::velocity() const {
  const ::multiplayer::FloatVector* p = velocity_;
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::multiplayer::FloatVector*>(
      &::multiplayer::_FloatVector_default_instance_);
}
inline ::multiplayer::FloatVector* ObjectState::release_velocity() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectState.velocity)
  
  ::multiplayer::FloatVector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::multiplayer::FloatVector* ObjectState::mutable_velocity() {
  
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::multiplayer::FloatVector>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectState.velocity)
  return velocity_;
}
inline void ObjectState::set_allocated_velocity(::multiplayer::FloatVector* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:multiplayer.ObjectState.velocity)
}

// .multiplayer.FloatVector acceleration = 6;
inline bool ObjectState::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
inline const ::multiplayer::FloatVector& ObjectState::_internal_acceleration() const {
  return *acceleration_;
}
inline const ::multiplayer::FloatVector& ObjectState::acceleration() const {
  const ::multiplayer::FloatVector* p = acceleration_;
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::multiplayer::FloatVector*>(
      &::multiplayer::_FloatVector_default_instance_);
}
inline ::multiplayer::FloatVector* ObjectState::release_acceleration() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectState.acceleration)
  
  ::multiplayer::FloatVector* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::multiplayer::FloatVector* ObjectState::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::multiplayer::FloatVector>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectState.acceleration)
  return acceleration_;
}
inline void ObjectState::set_allocated_acceleration(::multiplayer::FloatVector* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:multiplayer.ObjectState.acceleration)
}

// .multiplayer.FloatVector wVelocity = 7;
inline bool ObjectState::has_wvelocity() const {
  return this != internal_default_instance() && wvelocity_ != NULL;
}
inline const ::multiplayer::FloatVector& ObjectState::_internal_wvelocity() const {
  return *wvelocity_;
}
inline const ::multiplayer::FloatVector& ObjectState::wvelocity() const {
  const ::multiplayer::FloatVector* p = wvelocity_;
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.wVelocity)
  return p != NULL ? *p : *reinterpret_cast<const ::multiplayer::FloatVector*>(
      &::multiplayer::_FloatVector_default_instance_);
}
inline ::multiplayer::FloatVector* ObjectState::release_wvelocity() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectState.wVelocity)
  
  ::multiplayer::FloatVector* temp = wvelocity_;
  wvelocity_ = NULL;
  return temp;
}
inline ::multiplayer::FloatVector* ObjectState::mutable_wvelocity() {
  
  if (wvelocity_ == NULL) {
    auto* p = CreateMaybeMessage<::multiplayer::FloatVector>(GetArenaNoVirtual());
    wvelocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectState.wVelocity)
  return wvelocity_;
}
inline void ObjectState::set_allocated_wvelocity(::multiplayer::FloatVector* wvelocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(wvelocity_);
  }
  if (wvelocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wvelocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wvelocity, submessage_arena);
    }
    
  } else {
    
  }
  wvelocity_ = wvelocity;
  // @@protoc_insertion_point(field_set_allocated:multiplayer.ObjectState.wVelocity)
}

// .multiplayer.FloatVector wAcceleration = 8;
inline bool ObjectState::has_wacceleration() const {
  return this != internal_default_instance() && wacceleration_ != NULL;
}
inline const ::multiplayer::FloatVector& ObjectState::_internal_wacceleration() const {
  return *wacceleration_;
}
inline const ::multiplayer::FloatVector& ObjectState::wacceleration() const {
  const ::multiplayer::FloatVector* p = wacceleration_;
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.wAcceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::multiplayer::FloatVector*>(
      &::multiplayer::_FloatVector_default_instance_);
}
inline ::multiplayer::FloatVector* ObjectState::release_wacceleration() {
  // @@protoc_insertion_point(field_release:multiplayer.ObjectState.wAcceleration)
  
  ::multiplayer::FloatVector* temp = wacceleration_;
  wacceleration_ = NULL;
  return temp;
}
inline ::multiplayer::FloatVector* ObjectState::mutable_wacceleration() {
  
  if (wacceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::multiplayer::FloatVector>(GetArenaNoVirtual());
    wacceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:multiplayer.ObjectState.wAcceleration)
  return wacceleration_;
}
inline void ObjectState::set_allocated_wacceleration(::multiplayer::FloatVector* wacceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(wacceleration_);
  }
  if (wacceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wacceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wacceleration, submessage_arena);
    }
    
  } else {
    
  }
  wacceleration_ = wacceleration;
  // @@protoc_insertion_point(field_set_allocated:multiplayer.ObjectState.wAcceleration)
}

// float angleToControlX = 9;
inline void ObjectState::clear_angletocontrolx() {
  angletocontrolx_ = 0;
}
inline float ObjectState::angletocontrolx() const {
  // @@protoc_insertion_point(field_get:multiplayer.ObjectState.angleToControlX)
  return angletocontrolx_;
}
inline void ObjectState::set_angletocontrolx(float value) {
  
  angletocontrolx_ = value;
  // @@protoc_insertion_point(field_set:multiplayer.ObjectState.angleToControlX)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace multiplayer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_object_2dstate_2eproto
